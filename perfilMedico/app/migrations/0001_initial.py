# Generated by Django 5.1.7 on 2025-05-05 14:34

import app.models
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(help_text='Código da doença', max_length=8, unique=True, verbose_name='CID')),
                ('descricao', models.CharField(help_text='Descrição da doença', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FichaCadastral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_completo', models.CharField(max_length=200)),
                ('data_nascimento', models.DateField(help_text='Data de nascimento no formato DD/MM/AAAA', validators=[app.models.validadorDataNascimento], verbose_name='Data de Nascimento')),
                ('cpf', models.CharField(help_text='Somente números', max_length=11, unique=True, validators=[django.core.validators.RegexValidator(code='cpf_invalido', message='Número de CPF precisa ter apenas números e 11 deles.', regex='^\\d{11}$'), app.models.validadorDeCPF], verbose_name='CPF')),
                ('cns', models.IntegerField(unique=True)),
                ('endereco', models.CharField(max_length=100, verbose_name='Endereço de residência')),
                ('cep', models.CharField(help_text='Somente números', max_length=8, validators=[django.core.validators.RegexValidator(code='cep_invalido', message='Número de CEP ter apenas números e 8 deles.', regex='\\d{8}$')], verbose_name='CEP')),
            ],
        ),
        migrations.CreateModel(
            name='Medicamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200)),
                ('anvisa_codigo', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Medico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200, unique=True)),
                ('crm', models.CharField(max_length=10, unique=True)),
                ('ativo', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vacina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nomeVacina', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Vacinas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_aplicacao', models.DateField(help_text='Data de obtenção dos dados', verbose_name='Data')),
            ],
        ),
        migrations.CreateModel(
            name='ExameLaboratorial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(help_text='Data de obtenção dos dados', verbose_name='Data')),
                ('hemoglobina', models.DecimalField(blank=True, decimal_places=1, help_text='g/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(40.0)])),
                ('hematocrito', models.SmallIntegerField(blank=True, help_text='porcentagem', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('hemacias', models.DecimalField(blank=True, decimal_places=1, help_text='milhões/uL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30.0)])),
                ('volumeCorpuscular', models.DecimalField(blank=True, decimal_places=1, help_text='f/L', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999.0)], verbose_name='Volume Corpuscular Médio')),
                ('hemoglobinaCorpuscular', models.DecimalField(blank=True, decimal_places=1, help_text='pg', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99.0)], verbose_name='Hemoglobina Corpuscular Média')),
                ('concentracaoHemoglobinaCorpuscular', models.DecimalField(blank=True, decimal_places=1, help_text='g/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99.0)], verbose_name='Concentração Hemoglobina Corpuscular Média')),
                ('amplitudeEritrocitos', models.DecimalField(blank=True, decimal_places=1, help_text='porcentagem', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99.0)], verbose_name='Amplitude de Distribuição dos Eritrócitos')),
                ('leucocitosTotais', models.PositiveSmallIntegerField(blank=True, help_text='µL', null=True, verbose_name='Leucócitos totais')),
                ('neutrofilos', models.PositiveSmallIntegerField(blank=True, help_text='µL', null=True, verbose_name='Neutrófilos')),
                ('linfocitos', models.PositiveSmallIntegerField(blank=True, help_text='µL', null=True, verbose_name='Linfócitos')),
                ('monocitos', models.PositiveSmallIntegerField(blank=True, help_text='µL', null=True, verbose_name='Monócitos')),
                ('eosinofilos', models.PositiveSmallIntegerField(blank=True, help_text='µL', null=True, verbose_name='Eosinófilos')),
                ('basofilos', models.PositiveSmallIntegerField(blank=True, help_text='µL', null=True, verbose_name='Basófilos')),
                ('plaquetas', models.PositiveIntegerField(blank=True, help_text='µL', null=True, verbose_name='Plaquetas (PLT)')),
                ('volumePlaquetario', models.DecimalField(blank=True, decimal_places=1, help_text='fL', max_digits=3, null=True, verbose_name='Volume Plaquetário Médio (VPM)')),
                ('glicemiaJejum', models.PositiveSmallIntegerField(blank=True, help_text='mg/dL', null=True, verbose_name='Glicemia em jejum')),
                ('hemoglobinaGlicada', models.DecimalField(blank=True, decimal_places=1, help_text='porcentagem', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Hemoglobina Glicada (HbA1c)')),
                ('creatinina', models.DecimalField(blank=True, decimal_places=1, help_text='mg/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ureia', models.DecimalField(blank=True, decimal_places=1, help_text='mg/dL', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)])),
                ('filtracaoGlomerular', models.DecimalField(blank=True, decimal_places=1, help_text='mL/min/1,73 m²', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)], verbose_name='Taxa de Filtração Glomerular (TFG ou eGFR)')),
                ('acidoUrico', models.DecimalField(blank=True, decimal_places=1, help_text='mg/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Ácido Úrico')),
                ('sodio', models.DecimalField(blank=True, decimal_places=1, help_text='mEq/L', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)], verbose_name='Sódio (Na⁺)')),
                ('potassio', models.DecimalField(blank=True, decimal_places=1, help_text='mEq/L', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Potássio (K⁺)')),
                ('calcio', models.DecimalField(blank=True, decimal_places=1, help_text='mEq/L', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Cálcio (Ca²⁺)')),
                ('fosforo', models.DecimalField(blank=True, decimal_places=1, help_text='mEq/L', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Fósforo (P)')),
                ('alt', models.SmallIntegerField(blank=True, help_text='U/L', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Alanina Aminotransferase (ALT)')),
                ('ast', models.SmallIntegerField(blank=True, help_text='U/L', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Aspartato Aminotransferase (AST)')),
                ('fa', models.SmallIntegerField(blank=True, help_text='U/L', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Fosfatase Alcalina (FA)')),
                ('ggt', models.SmallIntegerField(blank=True, help_text='U/L', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Gama-Glutamil Transferase (GGT)')),
                ('bilirrubinaTotal', models.DecimalField(blank=True, decimal_places=1, help_text='mg/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Bilirrubina Total')),
                ('albumina', models.DecimalField(blank=True, decimal_places=1, help_text='g/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Albumina')),
                ('tempoProtrombina', models.DecimalField(blank=True, decimal_places=1, help_text='Em segundos', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='TP (Tempo de Protrombina) / INR')),
                ('amonia', models.DecimalField(blank=True, decimal_places=1, help_text=' µg/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Amônia')),
                ('ldh', models.SmallIntegerField(blank=True, help_text='U/L', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Desidrogenase Láctica (LDH)')),
                ('tsh', models.DecimalField(blank=True, decimal_places=1, help_text='mUI/L', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hormônio Tireoestimulante (TSH)')),
                ('t4', models.DecimalField(blank=True, decimal_places=1, help_text='ng/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Tiroxina Livre (T4)')),
                ('t3', models.DecimalField(blank=True, decimal_places=1, help_text='pg/mL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Triiodotironina Livre (T3)')),
                ('t4Total', models.DecimalField(blank=True, decimal_places=1, help_text='µg/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Tiroxina Total (T4 Total)')),
                ('t3Total', models.DecimalField(blank=True, decimal_places=1, help_text='ng/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Triiodotironina Total (T3 Total)')),
                ('antiTPO', models.SmallIntegerField(blank=True, help_text='UI/mL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Anticorpo Antiperoxidase Tireoidiana (Anti-TPO)')),
                ('antiTG', models.SmallIntegerField(blank=True, help_text='UI/mL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Anticorpo Antitireoglobulina (Anti-Tg)')),
                ('trab', models.SmallIntegerField(blank=True, help_text='UI/L', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Anticorpo Antirreceptor de TSH (TRAb)')),
                ('pcr', models.DecimalField(blank=True, decimal_places=1, help_text='mg/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Proteína C-Reativa (PCR)')),
                ('evhs', models.SmallIntegerField(blank=True, help_text='mm/h', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Velocidade de Hemossedimentação (VHS)')),
                ('ferritinina', models.SmallIntegerField(blank=True, help_text='ng/mL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Ferritina')),
                ('ferroSerico', models.SmallIntegerField(blank=True, help_text='µg/dL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Ferro Sérico')),
                ('estradiol', models.SmallIntegerField(blank=True, help_text='pg/dL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Estradiol (E2)')),
                ('progesterona', models.SmallIntegerField(blank=True, help_text='ng/mL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Progesterona')),
                ('fsh', models.SmallIntegerField(blank=True, help_text='mIU/mL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hormônio Folículoestimulante (FSH)')),
                ('lh', models.SmallIntegerField(blank=True, help_text='mIU/mL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hormônio Luteinizante (LH)')),
                ('testosteronaTotal', models.SmallIntegerField(blank=True, help_text='ng/dL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Testosterona Total')),
                ('testosteronaLivre', models.SmallIntegerField(blank=True, help_text='ng/dL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Testosterona Livre')),
                ('cortisol', models.SmallIntegerField(blank=True, help_text='µg/dL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cortisol (8h da manhã)')),
                ('acth', models.SmallIntegerField(blank=True, help_text='pg/dL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hormônio Adrenocorticotrófico (ACTH)')),
                ('aldosterona', models.SmallIntegerField(blank=True, help_text='ng/dL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Aldosterona (em repouso)')),
                ('peptideoC', models.DecimalField(blank=True, decimal_places=1, help_text='ng/dL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Peptídeo C')),
                ('prolactina', models.SmallIntegerField(blank=True, help_text='ng/dL', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='prolactina')),
                ('gh', models.DecimalField(blank=True, decimal_places=1, help_text='ng/mL', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hormônio do Crescimento (GH)')),
                ('hiv', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='HIV')),
                ('vdrlOUrpr', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='VDRL/RPR')),
                ('ftaabsOUtpha', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='FTA-ABS/TPHA')),
                ('hbsag', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='HBsAg')),
                ('antihbc', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Anti-HBc')),
                ('antihbs', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Anti-HBs')),
                ('antihcv', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Anti-HCV')),
                ('sorologiaHerpesIGC', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Sorologia Herpes IgC')),
                ('sorologiaHerpesIGM', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Sorologia Herpes IgM')),
                ('clamidia', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Clamídia')),
                ('gonorreia', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Gonorreia')),
                ('dengue', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Dengue')),
                ('zikaVirus', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Zika Virus')),
                ('chikungunya', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Chikungunya')),
                ('febreTifoide', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Febre Tifoide')),
                ('toxoplasmose', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Toxoplasmose')),
                ('rubeola', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Rubeola')),
                ('citomegalovirus', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Citomegalovírus')),
                ('chagas', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Doença de Chagas')),
                ('leptospirose', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Leptospirose')),
                ('fatorReumatoide', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Fator Reumatoide')),
                ('antiCCP', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Anti-CCP')),
                ('anticorpoAntinuclear', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Anticorpo Antinuclear')),
                ('antiDNA', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Anti-DNA dupla hélice')),
                ('ebv', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Epstein-Barr Vírus')),
                ('covid19', models.BooleanField(blank=True, help_text='reativo?', null=True, verbose_name='Covid19')),
                ('cid', models.ManyToManyField(related_name='CIDs', to='app.cid')),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.fichacadastral')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricoPesoAltura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(help_text='Data de obtenção dos dados', verbose_name='Data')),
                ('peso', models.DecimalField(decimal_places=1, help_text='Em kilogramas', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(700)])),
                ('altura', models.IntegerField(help_text='Em centímetros', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(280)])),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.fichacadastral')),
            ],
        ),
        migrations.CreateModel(
            name='Prontuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_sanguineo', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('AB', 'AB'), ('O', 'O')], max_length=3, verbose_name='Tipo Sanguíneo')),
                ('fator_rh', models.CharField(choices=[('+', '+'), ('-', '-')], max_length=3, verbose_name='Fator RH')),
                ('doador', models.BooleanField(verbose_name='Doador de Orgãos?')),
                ('histocompatibilidade', models.TextField(blank=True, max_length=100, null=True)),
                ('paciente', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app.fichacadastral')),
            ],
        ),
        migrations.CreateModel(
            name='Receituario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(auto_now_add=True)),
                ('medico', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.medico')),
                ('prontuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.prontuario')),
            ],
        ),
        migrations.CreateModel(
            name='MedicamentoReceitado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosagem', models.CharField(max_length=20)),
                ('frequencia', models.CharField(max_length=20)),
                ('observacao', models.CharField(max_length=100)),
                ('medicamento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.medicamento')),
                ('receituario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.receituario')),
            ],
        ),
    ]
